<?php

use Illuminate\Database\Seeder;
use App\Blueprint;

class ExampleBlueprintSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $b1 = new Blueprint;
        $b1->name = '範例：按照排名分配成績';
        $b1->note = '輸入排名表與級距表，即可自動依排名分配成績';
        $b1->payload = json_decode('{"steps": {"ClCvmOde": {"name": "轉換百分比", "type": "sql_select_map", "param": {"select": [{"as": "grade_start", "expr": "ixMlU1pB_grade_start", "type": "integer"}, {"as": "grade_end", "expr": "ixMlU1pB_grade_end", "type": "integer"}, {"as": "percentage_start", "expr": "ixMlU1pB_percentage_start", "type": "integer"}, {"as": "percentage_end", "expr": "ixMlU1pB_percentage_end", "type": "integer"}, {"as": "start", "expr": "ixMlU1pB_percentage_start * Xr4W3xOx_result_total / 100", "type": "integer"}, {"as": "end", "expr": "ixMlU1pB_percentage_end * Xr4W3xOx_result_total / 100", "type": "integer"}]}, "inputs": {"input": "P6KgjQus_result"}, "output": "ClCvmOde_result"}, "P6KgjQus": {"name": "帶入課程人數", "type": "sql_join", "param": {"method": "INNER JOIN"}, "inputs": {"left": "ixMlU1pB", "right": "Xr4W3xOx_result"}, "output": "P6KgjQus_result"}, "S28J1Eed": {"name": "合併學生排名", "type": "sql_join", "param": {"method": "LEFT JOIN", "conditions": [{"left": "rank", "right": "start", "operator": ">"}, {"left": "rank", "right": "end", "operator": "<="}]}, "inputs": {"left": "nxHNiEi5", "right": "ClCvmOde_result"}, "output": "S28J1Eed_result"}, "Xr4W3xOx": {"name": "計算總人數", "type": "sql_select_map", "param": {"select": [{"as": "total", "expr": "COUNT(*)", "type": "integer"}]}, "inputs": {"input": "nxHNiEi5"}, "output": "Xr4W3xOx_result"}, "q5uh8nQs": {"name": "配分", "type": "sql_select_map", "param": {"select": [{"as": "rank", "expr": "nxHNiEi5_rank", "type": "integer"}, {"as": "student_number", "expr": "nxHNiEi5_student_number", "type": "varchar(255)"}, {"as": "grade", "expr": "ClCvmOde_result_grade_start - (((ClCvmOde_result_grade_start - ClCvmOde_result_grade_end) / (ClCvmOde_result_end - ClCvmOde_result_start)) * (nxHNiEi5_rank - ClCvmOde_result_start - 1))", "type": "float"}]}, "inputs": {"input": "S28J1Eed_result"}, "output": "q5uh8nQs_result"}}, "storages": {"ixMlU1pB": {"name": "分數級距分配表", "type": "table", "schema": [{"name": "grade_start", "type": "integer"}, {"name": "grade_end", "type": "integer"}, {"name": "percentage_start", "type": "integer"}, {"name": "percentage_end", "type": "integer"}]}, "nxHNiEi5": {"name": "學生排名", "type": "table", "schema": [{"name": "rank", "type": "integer"}, {"name": "student_number", "type": "varchar(255)"}]}, "ClCvmOde_result": {"name": "轉換百分比的結果", "type": "table", "schema": [{"name": "grade_start", "type": "integer"}, {"name": "grade_end", "type": "integer"}, {"name": "percentage_start", "type": "integer"}, {"name": "percentage_end", "type": "integer"}, {"name": "start", "type": "integer"}, {"name": "end", "type": "integer"}], "generated": true}, "P6KgjQus_result": {"name": "帶入課程人數的結果", "type": "table", "schema": [{"name": "ixMlU1pB_grade_start", "type": "integer"}, {"name": "ixMlU1pB_grade_end", "type": "integer"}, {"name": "ixMlU1pB_percentage_start", "type": "integer"}, {"name": "ixMlU1pB_percentage_end", "type": "integer"}, {"name": "Xr4W3xOx_result_total", "type": "integer"}], "generated": true}, "S28J1Eed_result": {"name": "合併學生排名的結果", "type": "table", "schema": [{"name": "nxHNiEi5_rank", "type": "integer"}, {"name": "nxHNiEi5_student_number", "type": "varchar(255)"}, {"name": "ClCvmOde_result_grade_start", "type": "integer"}, {"name": "ClCvmOde_result_grade_end", "type": "integer"}, {"name": "ClCvmOde_result_percentage_start", "type": "integer"}, {"name": "ClCvmOde_result_percentage_end", "type": "integer"}, {"name": "ClCvmOde_result_start", "type": "integer"}, {"name": "ClCvmOde_result_end", "type": "integer"}], "generated": true}, "Xr4W3xOx_result": {"name": "計算總人數的結果", "type": "table", "schema": [{"name": "total", "type": "integer"}], "generated": true}, "q5uh8nQs_result": {"name": "配分的結果", "type": "table", "schema": [{"name": "rank", "type": "integer"}, {"name": "student_number", "type": "varchar(255)"}, {"name": "grade", "type": "float"}], "generated": true}}}', true);
        $b1->save();

        $b2 = new Blueprint;
        $b2->name = '範例：排課';
        $b2->note = '總共排五堂課的範例';
        $b2->payload = json_decode('{"steps": {"J8qmJ9Wo": {"name": "排課 SMT", "type": "smt", "param": {"content": "(assert (or (or (and (>= a1 10) (<= a1 13)) (and (>= a1 20) (<= a1 25))) (and (>= a1 30) (<= a1 35))))\n(assert (or (or (and (>= a2 10) (<= a2 13)) (and (>= a2 20) (<= a2 25))) (and (>= a2 30) (<= a2 35))))\n(assert (or (or (and (>= a3 10) (<= a3 13)) (and (>= a3 20) (<= a3 25))) (and (>= a3 30) (<= a3 35))))\n(assert (or (or (and (>= b1 10) (<= b1 13)) (and (>= b1 20) (<= b1 25))) (and (>= b1 30) (<= b1 35))))\n(assert (or (or (and (>= b2 10) (<= b2 13)) (and (>= b2 20) (<= b2 25))) (and (>= b2 30) (<= b2 35))))\n(assert (or (or (and (>= b3 10) (<= b3 13)) (and (>= b3 20) (<= b3 25))) (and (>= b3 30) (<= b3 35))))\n(assert (or (or (and (>= c1 10) (<= c1 13)) (and (>= c1 20) (<= c1 25))) (and (>= c1 30) (<= c1 35))))\n(assert (or (or (and (>= c2 10) (<= c2 13)) (and (>= c2 20) (<= c2 25))) (and (>= c2 30) (<= c2 35))))\n(assert (or (or (and (>= c3 10) (<= c3 13)) (and (>= c3 20) (<= c3 25))) (and (>= c3 30) (<= c3 35))))\n(assert (or (or (and (>= d1 10) (<= d1 13)) (and (>= d1 20) (<= d1 25))) (and (>= d1 40) (<= d1 45))))\n(assert (or (or (and (>= d2 10) (<= d2 13)) (and (>= d2 20) (<= d2 25))) (and (>= d2 40) (<= d2 45))))\n(assert (or (or (and (>= d3 10) (<= d3 13)) (and (>= d3 20) (<= d3 25))) (and (>= d3 40) (<= d3 45))))\n(assert (or (or (and (>= e1 10) (<= e1 13)) (and (>= e1 20) (<= e1 25))) (and (>= e1 40) (<= e1 45))))\n(assert (or (or (and (>= e2 10) (<= e2 13)) (and (>= e2 20) (<= e2 25))) (and (>= e2 40) (<= e2 45))))\n(assert (or (or (and (>= e3 10) (<= e3 13)) (and (>= e3 20) (<= e3 25))) (and (>= e3 40) (<= e3 45))))\n(assert (not (= a1 a2)))\n(assert (not (= a1 a3)))\n(assert (not (= a1 b1)))\n(assert (not (= a1 b2)))\n(assert (not (= a1 b3)))\n(assert (not (= a1 c1)))\n(assert (not (= a1 c2)))\n(assert (not (= a1 c3)))\n(assert (not (= a2 a1)))\n(assert (not (= a2 a3)))\n(assert (not (= a2 b1)))\n(assert (not (= a2 b2)))\n(assert (not (= a2 b3)))\n(assert (not (= a2 c1)))\n(assert (not (= a2 c2)))\n(assert (not (= a2 c3)))\n(assert (not (= a3 a1)))\n(assert (not (= a3 a2)))\n(assert (not (= a3 b1)))\n(assert (not (= a3 b2)))\n(assert (not (= a3 b3)))\n(assert (not (= a3 c1)))\n(assert (not (= a3 c2)))\n(assert (not (= a3 c3)))\n(assert (not (= c1 a1)))\n(assert (not (= c1 a2)))\n(assert (not (= c1 a3)))\n(assert (not (= c1 b1)))\n(assert (not (= c1 b2)))\n(assert (not (= c1 b3)))\n(assert (not (= c1 c2)))\n(assert (not (= c1 c3)))\n(assert (not (= c2 a1)))\n(assert (not (= c2 a2)))\n(assert (not (= c2 a3)))\n(assert (not (= c2 b1)))\n(assert (not (= c2 b2)))\n(assert (not (= c2 b3)))\n(assert (not (= c2 c1)))\n(assert (not (= c2 c3)))\n(assert (not (= c3 a1)))\n(assert (not (= c3 a2)))\n(assert (not (= c3 a3)))\n(assert (not (= c3 b1)))\n(assert (not (= c3 b2)))\n(assert (not (= c3 b3)))\n(assert (not (= c3 c1)))\n(assert (not (= c3 c2)))\n(assert (not (= b1 a1)))\n(assert (not (= b1 a2)))\n(assert (not (= b1 a3)))\n(assert (not (= b1 b2)))\n(assert (not (= b1 b3)))\n(assert (not (= b1 c1)))\n(assert (not (= b1 c2)))\n(assert (not (= b1 c3)))\n(assert (not (= b2 a1)))\n(assert (not (= b2 a2)))\n(assert (not (= b2 a3)))\n(assert (not (= b2 b1)))\n(assert (not (= b2 b3)))\n(assert (not (= b2 c1)))\n(assert (not (= b2 c2)))\n(assert (not (= b2 c3)))\n(assert (not (= b3 a1)))\n(assert (not (= b3 a2)))\n(assert (not (= b3 a3)))\n(assert (not (= b3 b1)))\n(assert (not (= b3 b2)))\n(assert (not (= b3 c1)))\n(assert (not (= b3 c2)))\n(assert (not (= b3 c3)))\n(assert (not (= d1 d2)))\n(assert (not (= d1 d3)))\n(assert (not (= d1 e1)))\n(assert (not (= d1 e2)))\n(assert (not (= d1 e3)))\n(assert (not (= d2 d1)))\n(assert (not (= d2 d3)))\n(assert (not (= d2 e1)))\n(assert (not (= d2 e2)))\n(assert (not (= d2 e3)))\n(assert (not (= d3 d1)))\n(assert (not (= d3 d2)))\n(assert (not (= d3 e1)))\n(assert (not (= d3 e2)))\n(assert (not (= d3 e3)))\n(assert (not (= e1 d1)))\n(assert (not (= e1 d2)))\n(assert (not (= e1 d3)))\n(assert (not (= e1 e2)))\n(assert (not (= e1 e3)))\n(assert (not (= e2 d1)))\n(assert (not (= e2 d2)))\n(assert (not (= e2 d3)))\n(assert (not (= e2 e1)))\n(assert (not (= e2 e3)))\n(assert (not (= e3 d1)))\n(assert (not (= e3 d2)))\n(assert (not (= e3 d3)))\n(assert (not (= e3 e1)))\n(assert (not (= e3 e2)))\n(assert (= a2 (+ a1 1)))\n(assert (= a3 (+ a2 1)))\n(assert (= b2 (+ b1 1)))\n(assert (= c2 (+ c1 1)))\n(assert (= d2 (+ d1 1)))\n(assert (= e2 (+ e1 1)))\n(assert (not (= a1 d1)))\n(assert (not (= a2 d1)))\n(assert (not (= a3 d1)))\n(assert (not (= a1 d2)))\n(assert (not (= a2 d2)))\n(assert (not (= a3 d2)))\n(assert (not (= a1 d3)))\n(assert (not (= a2 d3)))\n(assert (not (= a3 d3)))\n", "varList": [{"name": "a1", "type": "Int"}, {"name": "a2", "type": "Int"}, {"name": "a3", "type": "Int"}, {"name": "b1", "type": "Int"}, {"name": "b2", "type": "Int"}, {"name": "b3", "type": "Int"}, {"name": "c1", "type": "Int"}, {"name": "c2", "type": "Int"}, {"name": "c3", "type": "Int"}, {"name": "d1", "type": "Int"}, {"name": "d2", "type": "Int"}, {"name": "d3", "type": "Int"}, {"name": "e1", "type": "Int"}, {"name": "e2", "type": "Int"}, {"name": "e3", "type": "Int"}]}, "inputs": {"input": "8xLn5uxd"}, "output": "J8qmJ9Wo_result"}}, "storages": {"8xLn5uxd": {"name": "指定課表", "type": "smt_variable_table", "schema": [{"name": "variable", "type": "varchar(255)"}, {"name": "value", "type": "varchar(255)"}]}, "J8qmJ9Wo_result": {"name": "排課 SMT的結果", "type": "smt_variable_table", "schema": [{"name": "variable", "type": "varchar(255)"}, {"name": "value", "type": "varchar(255)"}], "generated": true}}}', true);
        $b2->save();
    }
}
